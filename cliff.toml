# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
This file is generated by `./changelog.sh`\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits | sort(attribute="message") %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
  { pattern = '(Merge.* from )(.*?)(/.*)', replace = '${1}[${2}](https://github.com/${2})${3}' },
  { pattern = '([ ^])#([0-9]+)([ $])', replace = '${1}[#${2}](https://github.com/jenv/jenv/issues/${2})${3}' },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
  { pattern = '^(Merge pull request)', replace = "contribution: ${1}" },
  { pattern = '^([^:]* .*([Rr]eadme|README).*)', replace = "doc: ${1}" },
  { pattern = '^(.*nstall(ation)? (step?|instruction).*)', replace = "doc: ${1}" },
  { pattern = '^[dD]oc(s?|ument) ', replace = "doc: " },
  { pattern = '^[fF]ix(e[ds])? ', replace = "fix: " },
  { pattern = '^[Rr]evert ', replace = "revert: " },
  { pattern = '^[Ss]pelling:? ', replace = "misc: spelling " },
  { pattern = '^([^ :]+) ', replace = "misc: ${1} " },
  { pattern = '^(.*)\n(.)', replace = "${1}\n\n${2}" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^[Cc]ontribution", group = "<!-- 0 -->Contributions" },
  { message = "([Pp]repare|[Uu]pdate version to) \\d\\.\\d\\.\\d", skip = true },
  { message = "^misc: Merge", skip = true },
  { message = "^feat", group = "<!-- 1 -->Features" },
  { message = "^fix", group = "<!-- 2 -->Bug Fixes" },
  { message = "^doc", group = "<!-- 4 -->Documentation" },
  { message = "^perf", group = "<!-- 5 -->Performance" },
  { message = "^refactor", group = "<!-- 3 -->Refactor" },
  { message = "^style", group = "<!-- 6 -->Styling" },
  { message = "^test", group = "<!-- 7 -->Testing" },
  #{ message = "^chore\\(deps.*\\)", skip = true },
  #{ message = "^chore\\(pr\\)", skip = true },
  #{ message = "^chore\\(pull\\)", skip = true },
  #{ message = "^chore|^ci", group = "<!-- 8 --> Miscellaneous Tasks" },
  { message = "^misc", group = "<!-- 8 --> Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 9 -->Security" },
  { message = "^revert", group = "<!-- 10 --> Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "\\d\\.\\d\\.\\d"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
